---
import Productcard from "./productcard.astro";

type Product = {
  title: string;
  size: string;
  brand: string;
  location: string;
  image: string;
  slug: string;
  type: string;
};

let products: Product[] = [];

try {
  const response = await fetch("https://uxyaqezkinnmddpsjcht.supabase.co/rest/v1/products", {
    headers: {
      apikey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV4eWFxZXpraW5ubWRkcHNqY2h0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM0ODMzNDcsImV4cCI6MjA2OTA1OTM0N30.3wwIHSsmdQwUlfCtnIZkJQfoqXJBP4M-NDLDpmaVusI",
      Authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV4eWFxZXpraW5ubWRkcHNqY2h0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM0ODMzNDcsImV4cCI6MjA2OTA1OTM0N30.3wwIHSsmdQwUlfCtnIZkJQfoqXJBP4M-NDLDpmaVusI",
    },
  });

  const data = await response.json();
  if (Array.isArray(data)) {
    products = data;
  }
} catch (err) {
  console.error("Fel vid hämtning av produkter:", err);
}
---

<div class="filters">
  <select id="sizeFilter">
    <option value="">Størrelse</option>
    <option value="XS">XS</option>
    <option value="S">S</option>
    <option value="M">M</option>
    <option value="L">L</option>
    <option value="XL">XL</option>
  </select>

  <select id="typeFilter">
    <option value="">Type</option>
    <option value="Kjole">Kjoler</option>
    <option value="Overdel">Overdele</option>
    <option value="Nederdel">Nederdele</option>
    <option value="Jakke">Jakker</option>
    <option value="Tilbehør">Tilbehør</option>
  </select>
</div>

<section class="cardsection">
  {
    products.map((product) => (
      <div class="productcard" data-size={product.size} data-type={product.type}>
        <Productcard data={product} />
      </div>
    ))
  }
</section>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const sizeFilter = document.getElementById("sizeFilter");
    const typeFilter = document.getElementById("typeFilter");

    function filterProducts() {
      const selectedSize = sizeFilter.value;
      const selectedType = typeFilter.value;

      document.querySelectorAll(".productcard").forEach((card) => {
        const cardSize = card.dataset.size;
        const cardType = card.dataset.type;

        const show = (!selectedSize || cardSize === selectedSize) && (!selectedType || cardType === selectedType);

        card.style.display = show ? "" : "none";
      });
    }

    sizeFilter?.addEventListener("change", filterProducts);
    typeFilter?.addEventListener("change", filterProducts);
  });
</script>

<style>
  .filters {
    display: flex;
    justify-content: left;
    margin-bottom: 1.5rem;
    gap: 1rem;
    flex-wrap: wrap;
    margin-top: 80px;
  }

  select {
    padding: 7px 15px;
    border-radius: 20px;
    font-size: 20px;
    border: 1px solid black;
    cursor: pointer;
    background-color: white;
  }

  .cardsection {
    margin-top: 20px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 5px;
  }

  @media (min-width: 768px) {
    .cardsection {
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      max-width: 1250px;
      gap: 10px;
    }
  }
</style>
